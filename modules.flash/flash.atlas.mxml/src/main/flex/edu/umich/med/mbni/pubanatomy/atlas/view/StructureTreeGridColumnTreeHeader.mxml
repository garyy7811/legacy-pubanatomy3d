<?xml version="1.0"?>
<v:TreeGridRendererHeader xmlns:fx="http://ns.adobe.com/mxml/2009"
                          xmlns:s="library://ns.adobe.com/flex/spark"
                          xmlns:v="edu.umich.med.mbni.treedatagrid.*">
    <fx:Metadata>
        [ResourceBundle("TextAtlas")]
    </fx:Metadata>
    <fx:Script><![CDATA[
        import edu.umich.med.mbni.treedatagrid.TreeGridDataColumnTree;

        import spark.events.IndexChangeEvent;
        import spark.events.ListEvent;

        [Bindable]
        private var _treeColumn:TreeGridDataColumnTree;

        private function set rfrDepth( ignoreVar:* ):void{
            treeGrid.treeGridData.rootModel.callInNext.putIn( refreshDepth );
        }

        private function refreshDepth():void{
            try{
                depthList.removeAll();
                for( var j:uint = 1; j < treeGrid.treeGridData.maxVisibleDepth; j++ ){
                    depthList.addItem( j );
                }
            }
            catch( bindingError:Error ){
                CONFIG::debugging{
                    trace( this + ":" + bindingError.getStackTrace() );
                }
            }
        }

        private function onDepthRollOver( event:ListEvent ):void{
            treeGrid.treeGridData.depthRollOver = ( event.item as int ) + 1;
        }

        private function onDepthRollOut( event:ListEvent ):void{
            if( treeGrid.treeGridData.depthRollOver == ( event.item as int ) + 1 ){
                treeGrid.treeGridData.depthRollOver = -1;
            }
        }

        private function onDepthChange( event:IndexChangeEvent ):void{
            treeGrid.treeGridData.selectDeselectByDepth( ( depthLst.selectedItem as int ) + 1 );
            treeGrid.treeGridData.rootModel.callInNext.putIn( function ():void{
                depthLst.selectedIndex = -1;
            } );
        }
        ]]></fx:Script>
    <fx:Binding source="( treeGridColumn.data as TreeGridDataColumnTree )" destination="_treeColumn"/>
    <fx:Binding source="treeGrid.treeGridData.maxVisibleDepth" destination="rfrDepth"/>
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0xaaaaaa"/>
                <s:GradientEntry color="0xeeeeee"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    <s:VGroup gap="3" horizontalAlign="center">
        <s:Label text="{resourceManager.getString( 'TextAtlas', 'treegrid.col.header.label.tree' )}"
                 fontWeight="bold" width="100%"
                 toolTip="#t(structureTreeGridHeaderTree)p#"
                />
        <s:List id="depthLst" itemRollOver="onDepthRollOver( event );" itemRollOut="onDepthRollOut( event );"
                allowMultipleSelection="false" change="onDepthChange( event );" focusEnabled="false"
                contentBackgroundAlpha="0" borderVisible="false">
            <s:dataProvider>
                <s:ArrayList id="depthList"/>
            </s:dataProvider>
            <s:itemRenderer>
                <fx:Component>
                    <s:ItemRenderer
                            width="{(outerDocument as StructureTreeGridColumnTreeHeader).treeGrid.treeGridData.depthIndent}">
                        <s:Label text="{data}" width="100%" height="100%" textAlign="center"
                                 toolTip="tree level/depth{data + '\r\n'}#t(strtrcoltrlvlslct0)p#"/>
                    </s:ItemRenderer>
                </fx:Component>
            </s:itemRenderer>
            <s:layout>
                <s:HorizontalLayout gap="0"/>
            </s:layout>
        </s:List>
    </s:VGroup>
    <s:Rect height="100%" width="5" visible="false" id="leftDropIndicator" left="0">
        <s:fill>
            <s:SolidColor color="0x000000"/>
        </s:fill>
    </s:Rect>
    <s:Rect height="100%" width="5" visible="false" id="rightDropIndicator" right="0">
        <s:fill>
            <s:SolidColor color="0x000000"/>
        </s:fill>
    </s:Rect>
</v:TreeGridRendererHeader>