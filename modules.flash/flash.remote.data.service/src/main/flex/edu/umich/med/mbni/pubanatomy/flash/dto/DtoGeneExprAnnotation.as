/**
 * Generated by Gas3 v2.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package edu.umich.med.mbni.pubanatomy.flash.dto {
import flash.utils.Dictionary;

[Bindable]
[RemoteClass(alias="edu.umich.med.mbni.pubanatomy.flash.dto.DtoGeneExprAnnotation")]
public class DtoGeneExprAnnotation extends DtoGeneExprAnnotationBase {
    public function DtoGeneExprAnnotation(){
        super();
    }

    public function initialize():void{
        if( _voxel2structureId == null ){
            var voxel2structureId:Dictionary = new Dictionary();
            var si2vn:Dictionary = new Dictionary();
            CONFIG::debugging{
                if( structureId.length < 999 ){
                    throw new Error( this + ".structurizeExpr " );
                }
            }
            for( var i:int = structureId.length - 1; i >= 0; i -- ){
                var strucId:int = structureId[i];
                CONFIG::debugging{
                    if( ! (x[ i ] is int ) ){
                        throw new Error( this + ".structurizeExpr " );
                    }
                }
                voxel2structureId[ x[i] + "," + y[i] + "," + z[i] ] = strucId;
                if( si2vn[ strucId ] == undefined ){
                    si2vn[ strucId ] = 0;
                }
                si2vn[ strucId ] = si2vn[ strucId ] + 1;
            }
            _voxel2structureId = voxel2structureId;
            structureId2VoxelNum = si2vn;
        }
    }

    private var _voxel2structureId:Dictionary;

    public var structureId2VoxelNum:Dictionary;

    public function structurizeExpr( level:DtoGeneExprLevel ):void{

        CONFIG::debugging{
            if( level.voxelLevels.length < 999 ){
                throw new Error( this + ".structurizeExpr " );
            }
        }
        var structureId2VoxelLevels:Dictionary = new Dictionary();
        for( var i:uint = 0; i < level.voxelLevels.length; i ++ ){
            var vl:DtoVoxelLevel = level.voxelLevels[i] as DtoVoxelLevel;
            var strInDic:* = _voxel2structureId[ vl.voxel.x + "," + vl.voxel.y + "," + vl.voxel.z ];
            if( strInDic != undefined && strInDic is int ){
                var strId:int = strInDic as int;
                vl.voxel.structureId = strId;
                var vls:Vector.<DtoVoxelLevel> = structureId2VoxelLevels[ strId ] as Vector.<DtoVoxelLevel>;
                if( vls == null ){
                    vls = new <DtoVoxelLevel>[];
                    structureId2VoxelLevels[ strId ] = vls;
                }
                vls.push( vl );
            }
        }
        level.structureId2VoxelLevels = structureId2VoxelLevels;
    }
}
}
